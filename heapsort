#include <iostream>
using namespace std;
void
heapify (int a[], int n, int i)
{
  int largest = i;
  int l = 2 * i + 1;
  int r = 2 * i + 2;
  if (l < n && a[l] > a[largest])
    largest = l;
  if (r < n && a[r] > a[largest])
    largest = r;
  if (largest != i)
    {
      swap (a[i], a[largest]);
      heapify (a, n, largest);
    }
}

void
heapSort (int a[], int n)
{
  // build heap (rearrange array)
  for (int i = n / 2 - 1; i >= 0; i--)
    heapify (a, n, i);

  // one by one extract an element from heap
  for (int i = n - 1; i >= 0; i--)
    {
      // move current root to end
      swap (a[0], a[i]);

      // call max heapify on the reduced heap
      heapify (a, i, 0);
    }
}

void
printArray (int a[], int n)
{
  for (int i = 0; i < n; i++)
    {
      cout << a[i];

    }
  cout << "\n";
}

int main ()
{
  int a[] = { 121, 10, 130, 57, 36, 17 };
  int n = sizeof (a) / sizeof (a[0]);
  heapsort (a, n);
  cout << "sorted array \n";
  printArray (a, n);

}

